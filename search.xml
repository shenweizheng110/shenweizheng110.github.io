<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Git基本操作</title>
      <link href="/2019/01/28/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/01/28/Git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1.查看分支"></a>1.查看分支</h2><pre><code>git branch 查看本地分支git branch -a 查看所有分支</code></pre><p><img src="http://static.zybuluo.com/shenweizheng/z2noezmkolv3clrzsv3kr3ys/image_1d29tb0vg1bu35spagp1spr1tqr14.png" alt="image_1d29tb0vg1bu35spagp1spr1tqr14.png-3kB"></p><p>前面带有 * 号的表示当前分支。</p><pre><code>git branch xxx 添加本地分支git branch -d xxx 删除分支git pull 拉取代码git pull origin xxx 拉取远程分支git push xxx 推送本地分支到远程git merge xxx 合并分支</code></pre><h2 id="2-合并分支"><a href="#2-合并分支" class="headerlink" title="2. 合并分支"></a>2. 合并分支</h2><p>当前分支  A  要合并分支B的代码<br>步骤一：将A分支的代码commit<br>步骤二：切换到B分支  <code>git checkout B</code><br>步骤三：拉取远程代码  <code>git pull</code><br>步骤四：切换回A分支 <code>git checkout A</code><br>步骤五：合并B分支代码 <code>git merge B</code></p><h2 id="3-合并部分文件"><a href="#3-合并部分文件" class="headerlink" title="3. 合并部分文件"></a>3. 合并部分文件</h2><p>当前分支 A  要合并分支文件 B 文件路径 /static/src/apps/login/store/loginStore.js<br>步骤一：将A分支commit<br>步骤二：切换B分支 <code>git checkout B</code><br>步骤三：拉取远程代码 <code>git pull</code><br>步骤四：检查有没有未提交的文件，有的话提交</p><pre><code>git statusgit commit -m &apos;&apos;</code></pre><p>步骤五：切换回A分支 <code>git checkout A</code><br>步骤六：cd进药合并的文件所在的文件夹 <code>cd /static/src/apps/login/store</code><br>步骤七：合并指定文件 <code>git merge B loginStore.js</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>webpack配置及踩过的那些坑</title>
      <link href="/2018/12/03/webpack%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
      <url>/2018/12/03/webpack%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>最近学习了一波webpack打包部署，作为一名前端，不会一个打包的工具可真的是丢人啊。不过，用webpack又要接触到了配置文件，这个当初当我放弃写后端的东西，不过以后还是要全面发展的。好了，话不多说，这篇文章用的是webpack4.x版本的，下面将细数当初才过的坑。</p><h2 id="1-基础准备"><a href="#1-基础准备" class="headerlink" title="1.基础准备"></a>1.基础准备</h2><p>创建一个文件夹webpackDemo，我们使用命令行进入这个文件夹，运行 <code>npm init</code> 命令，初始化这个文件夹，初始化过程中出现的询问的一些配置，一路回车就好了。初始化好了之后，我们会发现文件夹里面已经多了package.json文件。<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack-cli --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>安装必要的 webpack 和 webpack-cli，安装成功之后的package.json文件如下</p><p><img src="http://static.zybuluo.com/shenweizheng/p03mjogf4044egkmgw1y3jzz/image_1csm6khqv45cj0i1plv1erc15ig9.png" alt="image_1csm6khqv45cj0i1plv1erc15ig9.png-26.8kB"></p><p>在根目录下创建如下的目录结构</p><p><img src="http://static.zybuluo.com/shenweizheng/6w2mp3ir0jcu9vahebdtg5n0/image_1csm6mqk21otcctql4fvdcpcpm.png" alt="image_1csm6mqk21otcctql4fvdcpcpm.png-10.4kB"></p><p>在<code>test.js</code>文件里面编写如下代码，一万年经典的Hello World</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(<span class="string">"Hello World"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在<code>index.html</code>里面编写代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack初探<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/js/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这边引用一个<code>bundle.js</code>文件，<code>bundle.js</code>文件使我们打包之后生成的文件，接下来使用webpack的打包命令进行打包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src<span class="regexp">/apps/</span>test.js -o dist<span class="regexp">/js/</span>bundle.js</span><br></pre></td></tr></table></figure><p>wepack的基础打包命令 <code>webpack {entryFile} -o {aimFile}</code> 执行完之后会发现我们的目录里已经生成了 <code>bundle.js</code> 文件，我们运行 <code>index.html</code> 文件，可以看到亲切的Hello World了。<br>打包过程中，出现的输出如下</p><p><img src="http://static.zybuluo.com/shenweizheng/0ky26he4f2kmgoddtgzdfpuo/image_1csm770vr12441ju3u61v1s49v2j.png" alt="image_1csm770vr12441ju3u61v1s49v2j.png-52.1kB"></p><p>这边会显示webpack打包一共花了501ms，打包后的 <code>bundle.js</code> 体积是957bytes，因为我们的代码比较简单，所以打包生成的文件还是很小的。</p><h2 id="2-webpack-config-js配置文件"><a href="#2-webpack-config-js配置文件" class="headerlink" title="2.webpack.config.js配置文件"></a>2.webpack.config.js配置文件</h2><p>在根目录下创建文件 <code>webpack.config.js</code> 这是weback运行所要依据的配置。大致分为入口配置，出口配置，loader配置，plugins配置</p><h3 id="2-1-entry和output"><a href="#2-1-entry和output" class="headerlink" title="2.1 entry和output"></a>2.1 entry和output</h3><p>entry配置的是入口文件，告诉webpack从哪个文件开始解析，分为单入口和多入口。有了入口，就要配置出口，配置打包生成的文件位置和文件名称。在<code>webpack.config.js</code>里面编写如下代码</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="built_in">path</span>.resolve(__dirname, <span class="string">'src/apps/test.js'</span>),</span><br><span class="line">    <span class="built_in">output</span>: &#123;</span><br><span class="line">        <span class="built_in">path</span>: <span class="built_in">path</span>.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">"js/bundle.js"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先这边引用的<code>path</code>是<code>node.js</code>的一个模块，是用来解析路径用的，<code>path.resolve</code>指的是当前文件的所在路径，那么这边我们<code>entry</code>配置的就是<code>/src/apps/test.js</code>，这是单入口的配置形式。<br>下面对出口进行配置，output是一个对象，基础的两个属性，一个是输出文件的路径，另一个是输出文件的名称。<br>在<code>package.json</code>里面编写如下代码：</p><p><img src="http://static.zybuluo.com/shenweizheng/5fdepz23biva2ealjip37xvy/image_1csonnbu01u9340h1keo11d91nio9.png" alt="image_1csonnbu01u9340h1keo11d91nio9.png-10.9kB"></p><p>这边配置一下webpack的打包命令，之后通过<code>npm run start</code>进行打包，就不需要输一大串的命令了。打包一下我们可以看一下控制台的输出</p><p><img src="http://static.zybuluo.com/shenweizheng/68nmhoje7hk26hqsgfk6k2c1/image_1csonpuv21ev91ekv93i22k15gum.png" alt="image_1csonpuv21ev91ekv93i22k15gum.png-57.5kB"></p><p>发现有一个warning，这是因为我们还没有配置我们的mode，我们修改<code>webpack.config.js</code>文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const <span class="built_in">path</span> = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    entry: <span class="built_in">path</span>.resolve(__dirname, <span class="string">'src/apps/test.js'</span>),</span><br><span class="line">    <span class="built_in">output</span>: &#123;</span><br><span class="line">        <span class="built_in">path</span>: <span class="built_in">path</span>.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">"js/bundle.js"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在打包一下会发现这边的warning已经没有了。</p><h3 id="2-2-devtool配置"><a href="#2-2-devtool配置" class="headerlink" title="2.2 devtool配置"></a>2.2 devtool配置</h3><p>上面的配置文件我们是加了一个<code>devtool</code>的配置，这是因为webpack打包后的这个文件，我们可以看一下，已经不是我们所熟知的代码了，这样不方便于我们的调试，所以webpack为了解决这个问题，有一个<code>devtool</code>的配置。这边给一个别人博客的传送门<a href="https://www.jb51.net/article/134834.htm" target="_blank" rel="noopener">webpack之devtool详解</a>，<a href="https://webpack.js.org/configuration/devtool/#src/components/Sidebar/Sidebar.jsx" target="_blank" rel="noopener">webpack官方解释</a></p><h3 id="2-3-loader配置"><a href="#2-3-loader配置" class="headerlink" title="2.3 loader配置"></a>2.3 loader配置</h3><p>loader配置是webpack中的重点，因为webpack默认是只能处理html文件，如果要处理比如react应用中的jsx文件那么就需要配置一下loader，或者js、css等文件，都需要配置一下loader。这边已react应用为例。由于目前浏览器的兼容性问题，所以我们需要大量的插件和loader来转换我们写的高级js语法，就有了各种es6转es5，es7啥的。具体的还得好好研究。首先安装react相关的插件</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">npm</span> <span class="comment">install</span> <span class="comment">react</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</span> <span class="comment">react</span><span class="literal">-</span><span class="comment">dom</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">save</span></span><br></pre></td></tr></table></figure><p>安装解析react的相关插件和解析es6语法的相关插件。</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader -<span class="built_in">save</span>-<span class="built_in">dev</span> babel-core --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-env --<span class="built_in">save</span>-<span class="built_in">dev</span> babel-preset-react --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>babel-core<br>把 js 代码分析成 ast (抽象语法树, 是源代码的抽象语法结构的树状表现形式)，方便各个插件分析语法进行相应的处理。有些新语法在低版本 js 中是不存在的，如箭头函数，rest 参数，函数默认值等，这种语言层面的不兼容只能通过将代码转为 ast，再通过语法转换器分析其语法后转为低版本 js。</p><p>babel-preset-<em><br>babel-preset-</em> 代表了一系列的转码插件<br>有了 babel-plugin 系列，可以按需配置自己想要的特性，若是想搭个 es6 环境，一个个地配置各个插件，我猜你会疯掉。babel-preset 系列就可以满足我们的需求，babel-preset 系列打包了一组插件，类似于餐厅的套餐。如 babel-preset-es2015 打包了 es6 的特性，babel-preset-stage-0 打包处于 strawman 阶段的语法</p><p>下面看具体的配置，配置文件如下，这边首先我们要将package.json文件里面的babel-loader的版本更换成7.1.5然后重新安装一下模块，不然下面会因为babel-loader的版本问题出现打包失败的问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line"></span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line"></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'src/apps/console.jsx'</span>),</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">"js/bundle.js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/(\.js)|(\.jsx)$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    presets: [<span class="string">'env'</span>, <span class="string">'react'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>test 指明要对哪一种后缀的文件进行解析，使用正则进行验证<br>exclude 规定一些文件夹或文件不参与解析<br>use.loader 配置使用的loader名称<br>use.option 配置loader的其他选项，这边的presets是告诉webpack解析react语法和es6语法。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">Hello China!</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, mountNode);</span><br></pre></td></tr></table></figure><p>执行<code>npm run start</code>，然后运行我们的index.html文件可以看到Hello China！。</p><h3 id="2-4-plugin配置"><a href="#2-4-plugin配置" class="headerlink" title="2.4 plugin配置"></a>2.4 plugin配置</h3><p>插件赋予了webpack更多的功能，比如说 js和css分离打包。比如说happyPack的多线程打包，比如说每次打包前自动清空dist目录。<br>以js、css分离打包为例，这是使用的<code>extract-text-webpack-plugin</code>插件，<br>首先安装一下，注意这边安装的是<code>extract-text-webpack-plugin@next</code>而不是<code>extract-text-webpack-plugin</code></p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> extract-text-webpack-plugin@<span class="built_in">next</span></span><br><span class="line">npm install style-loader --<span class="built_in">save</span>-<span class="built_in">dev</span> css-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line"></span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line"></span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'src/apps/console.jsx'</span>),</span><br><span class="line"></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">"js/bundle.js"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/(\.js)|(\.jsx)$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    presets: [<span class="string">'env'</span>, <span class="string">'react'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">                use: [<span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'style/css/[name].css'</span>,</span><br><span class="line">            allChunks: <span class="literal">true</span> </span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###2.5 其他配置###</p><blockquote><p>stats配置</p></blockquote><p>在进行webpack打包的时候会出现很多的输出，但是有的输出是我们不需要看见的输出，这就可以采用stats进行配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">对webpack输出信息的配置，可以减少一些不必要的输出</span></span><br><span class="line"><span class="attr">stats:</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">    children:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>resolve.extensions 解决引入模块不需要加后缀<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// extensions 自动解决扩展，配置这个在引用模块时不用加后缀</span><br><span class="line">// modules 配置解析模块的搜索目录</span><br><span class="line">// path.<span class="built_in">resolve</span> 返回参数的绝对路径  path.<span class="keyword">join</span> 拼接路径 然后返回绝对路径</span><br><span class="line"><span class="built_in">resolve</span>: &#123;</span><br><span class="line">        module<span class="variable">s:</span> [path.<span class="built_in">resolve</span>(__dirname, <span class="string">'node_modules'</span>), path.<span class="keyword">join</span>(__dirname, <span class="string">'src'</span>)],</span><br><span class="line">        extension<span class="variable">s:</span> [<span class="string">'.wasm'</span>, <span class="string">'.mjs'</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>optimization配置 抽离公共模块<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">optimization</span>: &#123;</span><br><span class="line">    <span class="attribute">minimize</span>: false,</span><br><span class="line">    <span class="attribute">splitChunks</span>: &#123;</span><br><span class="line">        <span class="attribute">chunks</span>: <span class="string">'all'</span>,</span><br><span class="line">        <span class="attribute">name</span>: <span class="string">'common'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="last-一些解释及踩过的那些坑"><a href="#last-一些解释及踩过的那些坑" class="headerlink" title="last.一些解释及踩过的那些坑"></a>last.一些解释及踩过的那些坑</h2><p>###last.1 npm install 的时候 –save-dev 和–save的区别</p><p>首先这边的 <code>--save</code> 是将我们install的包写进package.json文件里面，后面的-dev才是要描述的重点，<code>-dev</code>是写进我们的<code>devDependencies</code>里面，如果不加这个那么是写进<code>dependencies</code>里面的，在生产环境下，是不会安装<code>devDependencies</code>里面的包的。这边找了一个别人的博客，写的比我这个更全面一点。<a href="https://www.cnblogs.com/blackgan/p/7678868.html" target="_blank" rel="noopener">对–save-dev和–save的区别详解</a></p><p>###last.2 webpack基础命令打包的时候报ERROR in multi ./src/apps/test.js dist/js/bundle.js<br>Module not found: Error: Can’t resolve ‘dist/js/bundle.js’ in ‘F:\WebDemo\webpackDemo’</p><p>这是因为webpack的版本问题，在webpack4.x版本之前的打包命令是<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">webpack </span><span class="template-variable">&#123;entryFile&#125;</span><span class="xml"> </span><span class="template-variable">&#123;aimFile&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>但是在webpack4.x开始基础打包命令就变成了<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">webpack </span>&#123;entryFile&#125; -<span class="class">o </span>&#123;aimFile&#125;</span><br></pre></td></tr></table></figure></p><p>###last.3出现Error: Cannot find module ‘@babel/core’###<br>这是因为<code>babel-loader</code>版本的问题，如果之前我们安装<code>babel-loader</code>的时候是采用<code>npm install babel-loader</code>这样写的话是默认安装最新版本的<code>babel-loader</code>最新的是8.x的，我们回退到7.1.5版本就可以避免这个报错了。</p><p>###last.4 webpack-dev-server问题 ###<br>1.webpack-dev-server 不会读取webpack.config.js配置的output也不会将生产的文件添加进项目目录里<br>2.webpack-dev-server 生成的文件和你dist里面的文件不是同一个文件。dist里面的是output里面决定<br>的webpack-dev-server打包生成的文件位置取决于contentBase配置</p><p>###last.5 的 package.json里面的打包命令###<br>–colors 输出结果带有颜色<br>–profile 输出性能数据看见每一步的耗时<br>–proress 输出当前的编译进度<br>–display-error-details 输出详细的错误信息</p><p>###lats.6 使用extractTextPlugin时报 Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint instead###<br>这是因为安装<code>extract-text-webpack-plugin</code>的时候安装命令问题，实际上我们需要安装的是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"<span class="selector-tag">extract-text-webpack-plugin</span>": "^4<span class="selector-class">.0</span><span class="selector-class">.0-beta</span><span class="selector-class">.0</span>",</span><br></pre></td></tr></table></figure></p><p>解决办法，删除之前安装的extract插件，更换安装命令为<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> extract-text-webpack-plugin@<span class="built_in">next</span></span><br></pre></td></tr></table></figure></p><p>###last.7 入口文件配置[name].js 但是打包出来的文件总是main.js并不会根据入口名称决定出口名称###<br>这边的main.js main是取决你的主入口的，就是在执行npm init的时候那一堆默认的主入口。之所以没有按照入口文件来改变出口文件的名称，是因为入口文件采用的单入口的形式，也就是如下写法<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">entry</span>: path.resolve(__dirname, <span class="symbol">'src</span>/apps/console.jsx')</span><br></pre></td></tr></table></figure></p><p>使用单入口的形式，那么<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">output</span>: &#123;</span><br><span class="line">        <span class="attribute">path</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'js/[name].js'</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>打包生成的文件只会有一个main.js 并不会生成console.js<br>解决办法是将单入口的写法换成多入口的形式，也就是下面这种写法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">entry</span>: &#123;</span><br><span class="line">        <span class="attribute">console</span>: path.<span class="built_in">resolve</span>(__dirname, <span class="string">'src/apps/console'</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><p>这样打包出来的文件就是console.js</p><p>###last.7 bundle.js和vendor.js的引入顺序问题###<br>vendor.js一定是最先引用的，因为bundle.js要依赖于vendor.js生存。</p><p>###last.8 名词解释 ###<br>webpack.config.dev.js 开发环境下的webpack配置文件<br>webpack.config.prod.js 生产环境下的配置文件<br>vendor.js 这是打包我们引入的第三方包的。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>腾讯云服务器配置JDK，tomcat解决外网无法访问问题</title>
      <link href="/2018/11/10/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEJDK%EF%BC%8Ctomcat%E8%A7%A3%E5%86%B3%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2018/11/10/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEJDK%EF%BC%8Ctomcat%E8%A7%A3%E5%86%B3%E5%A4%96%E7%BD%91%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>前几天试了一下腾讯云的学生服务器，在配置tomcat的时候，配置了好久，一直都是无法访问主页，翻看了N多的博客，关了防火墙，配置了安全组，依旧无法访问，接下来改了tomcat的配置终于成功，记录一下。<br>我用的是腾讯云的学生服务器，操作系统是CentOS7.2 64位 JDK版本是1.8.0 tomcat版本是8.5.34<br>准备一下XShell工具，我是使用的XShell。还有一个WinScp工具用来上传文件，当然也可以使用命令，但是我感觉有点慢，不懂是不是错觉。</p><h2 id="1-配置JDK"><a href="#1-配置JDK" class="headerlink" title="1.配置JDK"></a>1.配置JDK</h2><p>网上看到了很多配置jdk的方法，相对而言，配置一下jdk还是很简单。我是使用的直接解压linux版本的jdk文件然后配置下环境变量，当然也有的是直接使用yum安装jdk。那么我们首先去<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk官网</a>下载一下jdk<br><img src="http://static.zybuluo.com/shenweizheng/d6as8u57y5cwx0zklb2l8ubg/image_1crsc1nek1797gbtv7i1rfvpiv9.png" alt="image_1crsc1nek1797gbtv7i1rfvpiv9.png-103.2kB"></p><p>这边我们用的是后缀为.tar.gz的，这是linux版本的<br>使用我们的WinScp工具把我们刚刚的下载的jdk上传至我们的服务器。用XShell登录进服务器，这边有一个问题就是我看到有的博客是说一开始进去的时候不是root用户但是我这边是进去就是root用户。下面的所有的配置我们都是要在root用户下进行的。<br><img src="http://static.zybuluo.com/shenweizheng/dpu4hunouaswrrmozaq12750/image_1crscssno10vipt7m0e37m1rfd13.png" alt="image_1crscssno10vipt7m0e37m1rfd13.png-21.9kB"></p><p>如果你不是root用户而是ubuntu用户那么<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo su</span></span><br></pre></td></tr></table></figure></p><p>切换进root用户，当然我没有遇到这个问题。<br><img src="http://static.zybuluo.com/shenweizheng/jewd66ybvwimbvixxk3lxl4f/image_1crtp2a1sb8t10vtdsd1475dgs9.png" alt="image_1crtp2a1sb8t10vtdsd1475dgs9.png-25.8kB"><br>ls一下查看现在的根目录，解压jdk</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-<span class="number">8</span>u191-linux-x64<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>ls查看一下解压成功</p><p><img src="http://static.zybuluo.com/shenweizheng/r5nqg0utk1vumr6jqro13xkp/image_1crtp97csdms3kc15pv10c01jkr16.png" alt="image_1crtp97csdms3kc15pv10c01jkr16.png-7.4kB"></p><p>接下来在/usr下面创建一下文件夹叫java</p><p><img src="http://static.zybuluo.com/shenweizheng/o3c26xka6jvyiwo7nesvgiv9/image_1crtpt60a3271k911pcd1c4boqf1j.png" alt="image_1crtpt60a3271k911pcd1c4boqf1j.png-10.8kB"></p><p>接下来把我们解压好的jdk放到上一步创建的文件夹下面</p><p><img src="http://static.zybuluo.com/shenweizheng/9qxwwuaubcriiuqy62j7jg38/image_1crtq214a1r2lav3t7svm8144c20.png" alt="image_1crtq214a1r2lav3t7svm8144c20.png-5kB"></p><p>下面就是配置jdk的环境变量，我们需要修改 /etc/profile文件</p><p><img src="http://static.zybuluo.com/shenweizheng/hretoz8xtgh5byccpiydt2fj/image_1crtq922b1kt1jmb15ri16on5sb2d.png" alt="image_1crtq922b1kt1jmb15ri16on5sb2d.png-2.7kB"></p><p>配置一下JAVA_HOME CLASSPATH PATH<br><img src="http://static.zybuluo.com/shenweizheng/gogfsd3z7zlxc8zjcvfk8gfy/image_1crtqakkmm3s1a6103c1duq1be2q.png" alt="image_1crtqakkmm3s1a6103c1duq1be2q.png-75.5kB"></p><p>按esc之后 :wq 保存退出编辑，不得不说linux命令还是要会的，多多少少会用到linux的东西<br>使用source命令使我们刚刚做的修改生效，使用java -version检查我们的配置是否正确<br><img src="http://static.zybuluo.com/shenweizheng/wx9rjeszrp6a80sx5x2lnffr/image_1crtqesme1pmnldm1ltm12u71uq737.png" alt="image_1crtqesme1pmnldm1ltm12u71uq737.png-15.3kB"></p><p>到此为止jdk的配置已经做完了，下面就是tomcat的配置，也是本章的重点，拿笔开始记笔记了。</p><h2 id="2-Tomcat配置以及外网无法访问问题"><a href="#2-Tomcat配置以及外网无法访问问题" class="headerlink" title="2.Tomcat配置以及外网无法访问问题"></a>2.Tomcat配置以及外网无法访问问题</h2><p>首先第一步我们得去下一个tomcat和jdk一样，这边给一个传送门<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">tomcat8.5</a><br><img src="http://static.zybuluo.com/shenweizheng/7i5yo5ja413q6abv4oflxlg8/image_1crtqmg8s4ap1joo1ls219a2140k3k.png" alt="image_1crtqmg8s4ap1joo1ls219a2140k3k.png-93.4kB"></p><p>老样子还是下.tar.gz的，接下来上传tomcat，解压tomcat，将解压好的文件夹移至我们的/usr/java文件夹下面，当然你也可以重新建一个，这都是小事。</p><p>我们进入java文件夹，ls一下现在是有两个文件夹，一个是我们上面的jdk另一个是刚刚的tomcat</p><p><img src="http://static.zybuluo.com/shenweizheng/1jujj0042crmuqpr3nhq01he/image_1crtqu1pvaag1fcn4ld123vpdl41.png" alt="image_1crtqu1pvaag1fcn4ld123vpdl41.png-9.4kB"></p><p>那么下面就是tomcat的问题，首先我们去修改一下tomcat的端口号，默认是8080我们这边修改成80。修改conf/server.xml文件</p><p><img src="http://static.zybuluo.com/shenweizheng/m481dibr6w5yrraphxtm425r/image_1crtr550hecc8krk3e1spm18e14e.png" alt="image_1crtr550hecc8krk3e1spm18e14e.png-87.4kB"></p><p>接下来就是启动我们的tomcat先看一下能不能访问。启动程序和关闭程序在 bin目录下有一个startup.sh 和shutdown.sh<br><img src="http://static.zybuluo.com/shenweizheng/wfhcb1ul4humux1pedea0xuo/image_1crtr8o56c35t577c01j8n1e3d4r.png" alt="image_1crtr8o56c35t577c01j8n1e3d4r.png-23.9kB"></p><p>如果这一步遇到 -bash: startup.sh not command这种报错时<br><img src="http://static.zybuluo.com/shenweizheng/kmv88x25dvqaps4h54xmgps2/image_1crtrcipe1nla1bfd1honj199j458.png" alt="image_1crtrcipe1nla1bfd1honj199j458.png-3.3kB"></p><p>然后再执行startup.sh文件，这样就可以了。<br>那么我们这边开启了tomcat，使用外网ip加端口号访问一下看看情况。<br>如果你不能访问，首先配置一下云服务器的安全组，这边我们直接默认全部端口都放通，当然你也可以自定义配置一下规则。<br><img src="http://static.zybuluo.com/shenweizheng/5fo9j5yft5genj37nn2kuume/image_1crtrkq1k1d56sa6i1l18vf97t5l.png" alt="image_1crtrkq1k1d56sa6i1l18vf97t5l.png-134.3kB"></p><p>接下来重启一下服务器，不知道要不要重启，反正我是重启了一下。之后再去访问一下80端口，看能不能出现tomcat的主页，如果还是不行，那么接下去我们继续配置，这边安全组是已经都开启了，接下来我们查看80端口有没有开启。<br><img src="http://static.zybuluo.com/shenweizheng/ajfaio341tmx3l9idey0ylsq/image_1crtrscii1ls21anrl9417411oq762.png" alt="image_1crtrscii1ls21anrl9417411oq762.png-20.2kB"></p><p>我这边是已经配置好了的，所以80端口是开启的，如果你的80端口没有开启，那么下面我们去搞一下防火墙。<br>首先我们查看一下防火墙的状态<br><img src="http://static.zybuluo.com/shenweizheng/xnj3z2ymgshz32aylpes248g/image_1crts1red1bu81bfd50d4q1dio6f.png" alt="image_1crts1red1bu81bfd50d4q1dio6f.png-14.5kB"></p><p>发现现在防火墙是关闭的，这边我们先开启一下防火墙，不然待会出现filreWalld not runnuind的错<br><img src="http://static.zybuluo.com/shenweizheng/xs7nmzqmlgvdzwi1anzg7cvf/image_1crtsqrhpmbqirf1n2g17p0n2s6s.png" alt="image_1crtsqrhpmbqirf1n2g17p0n2s6s.png-10.2kB"></p><p>这边配置好了之后，我们在吧防火墙关闭一下<br><code>systemctl stop firewalld</code>，我们进入tomcat的bin目录下重启一下服务器。<br><img src="http://static.zybuluo.com/shenweizheng/objwn9diivl04baejjzuw4ru/image_1crtssq284be17641u821v391dgc79.png" alt="image_1crtssq284be17641u821v391dgc79.png-83.6kB"></p><p>如果你在关闭的时候遇到Neither the JAVA_HOME nor the JRE_HOME environment variable is defined这个报错的时候，使用vim修改一下bin目录下的setclasspath.sh，手动添加JAVA_HOME和JRE_HOME两个环境变量。<br><img src="http://static.zybuluo.com/shenweizheng/i7us0bl35qtytmr8ie00rchh/image_1crtt3g1d1lno1552p601sr325f83.png" alt="image_1crtt3g1d1lno1552p601sr325f83.png-269.3kB"></p><p>关闭之后，在启动一下tomcat，打开浏览器，访问公网ip访问，出现tomcat主页。如果还是没有出现的话，就无能为力了。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>常用样式汇总</title>
      <link href="/2018/11/01/%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2018/11/01/%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-小手样式"><a href="#1-小手样式" class="headerlink" title="1.小手样式"></a>1.小手样式</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cursor</span>: pointer</span><br></pre></td></tr></table></figure><h2 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2.垂直居中"></a>2.垂直居中</h2><p>使用flex布局<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vertical-align属性<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝对定位<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"outer"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-vertical-align失效问题"><a href="#3-vertical-align失效问题" class="headerlink" title="3.vertical-align失效问题"></a>3.vertical-align失效问题</h2><p>vertical-align属性只对行内元素有效果，要想在块级元素失效先设置一下displayinline-block</p><h2 id="4-css渐变"><a href="#4-css渐变" class="headerlink" title="4. css渐变"></a>4. css渐变</h2><p>线性渐变-从上到下（默认）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(red, blue); <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(red, blue); <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(red, blue); <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red, blue); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线性渐变-从左到右<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left, red , blue); <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(right, red, blue); <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(right, red, blue); <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red , blue); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线性渐变 - 对角<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#grad</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(left top, red , blue); <span class="comment">/* Safari 5.1 - 6.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(bottom right, red, blue); <span class="comment">/* Opera 11.1 - 12.0 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(bottom right, red, blue); <span class="comment">/* Firefox 3.6 - 15 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom right, red , blue); <span class="comment">/* 标准的语法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>window.open被拦截解决</title>
      <link href="/2018/10/28/window.open%E8%A2%AB%E6%8B%A6%E6%88%AA/"/>
      <url>/2018/10/28/window.open%E8%A2%AB%E6%8B%A6%E6%88%AA/</url>
      
        <content type="html"><![CDATA[<p>项目开发中遇到window.open写在回调里被浏览器拦截.<br>解决办法是在请求时新开一个tab页，然后再请求的回调里修改这个tab页的地址.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newWindow = <span class="built_in">window</span>.open(<span class="string">'about:blank'</span>); <span class="comment">//  新开一个tab页返回一个window对象</span></span><br><span class="line">axios.post(url&#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(response.data.status.code === <span class="number">1</span>)&#123;</span><br><span class="line">            newWindow.location.href = <span class="string">''</span> <span class="comment">//  修改新开页面的地址</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>react应用中mobx未检测到数组的更新</title>
      <link href="/2018/10/28/react%E5%BA%94%E7%94%A8%E4%B8%ADmobx%E6%9C%AA%E6%A3%80%E6%B5%8B%E5%88%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%9B%B4%E6%96%B0/"/>
      <url>/2018/10/28/react%E5%BA%94%E7%94%A8%E4%B8%ADmobx%E6%9C%AA%E6%A3%80%E6%B5%8B%E5%88%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>在mobx中定义一个可观察的数组<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>&#123;</span></span><br><span class="line">    @observable testArray = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在组件里面引用这个store<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testArray.map(<span class="function"><span class="params">item</span>=&gt;</span>(</span><br><span class="line">    &lt;span&gt;&#123;item&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br></pre></td></tr></table></figure></p><p>这个打印这个testArray数组会发现这个时候的数组类型已经不是我们常规的array类型了，已经被mobx转换成了observableArray类型的数组，这种的如果你的store里面只有这一个数组没有其他变量的时候，更新整个数组，除非你是将这个数组置为空，不然组件是不会观察到他的改变，就不会重新render了<br>解决办法是：<br>在组件中使用这个数组的时候，slice()一下转变成我们正常的js类型的array就可以了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">testArray.slice().map(<span class="function"><span class="params">item</span>=&gt;</span>(</span><br><span class="line">    &lt;span&gt;&#123;item&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br></pre></td></tr></table></figure></p><p>具体slice的地方可以是在store里面也可以在组件里面，组件里面就像上面写的那样,store里面就是先得到testArray然后slice一下，在把新的数组赋值给他。<br>如果遇到使用数组的时候出现一些看不懂的报错，排除数组越界的一些错误，多半是因为observableArray类型的问题，这个时候不妨slice()一下试试。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo博客配置</title>
      <link href="/2018/10/27/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/10/27/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网站图标更换"><a href="#1-网站图标更换" class="headerlink" title="1.网站图标更换"></a>1.网站图标更换</h2><p>themes\hexo-theme-Annie\layout_partial\head.ejs<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">href</span>=<span class="string">"&lt;%- config.root %&gt;img/favicon.ico"</span> <span class="attribute">rel</span>=<span class="string">"Shortcut Icon"</span> <span class="attribute">type</span>=<span class="string">"image/ico"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>我中间这个hexo-theme-Annie 是我的主题名字，只要路径差不多，找到layout_partial\head.ejs这个文件就对了，把你要换的那个ico文件放在根目录的public\img文件里面就行了，就是你放静态文件的那个目录。</p><h2 id="2-主题更换"><a href="#2-主题更换" class="headerlink" title="2.主题更换"></a>2.主题更换</h2><p>可以去hexo theme的官网找到你想要的主题，<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo-theme</a>选择你喜欢的主题,以我的为例，我选的是Annie<img src="http://static.zybuluo.com/shenweizheng/91gzkw8d7exfxt76rujuznus/TIM%E6%88%AA%E5%9B%BE20181024000407.png" alt="TIM截图20181024000407.png-41.1kB"><br>然后点击这个主题，就可以找到这个主题的博客拥有者，这时候观察浏览器的地址栏的路由，<a href="https://sariay.github.io/" target="_blank" rel="noopener">https://sariay.github.io/</a> github.io前面这个sariay就是博主的github用户名了<br>然后我们主要在进 <a href="https://github.com/博主用户名，这里就是https://github.com/sariay" target="_blank" rel="noopener">https://github.com/博主用户名，这里就是https://github.com/sariay</a> 就可以找到博主的仓库了<br><img src="http://static.zybuluo.com/shenweizheng/lw0roum747u4lwi79scp4o3x/TIM%E6%88%AA%E5%9B%BE20181024000712.png" alt="TIM截图20181024000712.png-207.9kB"><br>这里我们找到我们所选的主题 hexo-theme-Annie 点进去<br><img src="http://static.zybuluo.com/shenweizheng/di0v7n85s3nfxxdjo44my531/TIM%E6%88%AA%E5%9B%BE20181024000819.png" alt="TIM截图20181024000819.png-109.5kB"><br>复制一下网址，然后我们cd进我们的博客文件夹，右击git bash here<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/Sariay/hexo-theme-Annie.git themes/hexo-theme-Annie</span><br></pre></td></tr></table></figure></p><p>这样我们就可以吧主题克隆到我们的本地，然后需求修改一下博客的配置文件_config.yml 找到theme字段<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">theme</span>: hexo-<span class="built_in">theme</span>-Annie</span><br></pre></td></tr></table></figure></p><p>修改theme后面的值是我们刚刚克隆下来的主题名，注意克隆下的那个主题文件夹不要去修改他的文件夹的名字，这边配置文件修改完之后，启动下本地服务就会发现主题已经更新好了。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO博客 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>第一次使用hexo搭建博客的记录</title>
      <link href="/2018/10/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/10/26/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>基于github的博客，搭建过程可谓可歌可泣，翻遍了配置文件，总的来说是成功了百分之八十。基本的形状已经搭建好了，评论的功能还未加入，等待后续添加。刚开始使用的是Jekyll的主题，个人觉得还是hexo的主题好看一点，主要是一开始使用Jekyll的主题直接崩掉了，汗。。。。</p><h2 id="1-创建一个github账户"><a href="#1-创建一个github账户" class="headerlink" title="1.创建一个github账户"></a>1.创建一个github账户</h2><p>这个直接官网创建 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p><h2 id="2-创建一个本地仓库"><a href="#2-创建一个本地仓库" class="headerlink" title="2.创建一个本地仓库"></a>2.创建一个本地仓库</h2><p><img src="http://static.zybuluo.com/shenweizheng/m90nw4nyb9ohg4tqv1ruaw8i/TIM%E6%88%AA%E5%9B%BE20181021221725.png" alt="创建本地仓库"><br><img src="http://static.zybuluo.com/shenweizheng/kcp6ug83piiw75khyr3pjrck/TIM%E6%88%AA%E5%9B%BE20181021221854.png" alt="填写基本信息"><br>这里要注意你的Repository name的格式必须是  用户名.github.io，记得勾选下面的初始化README，当然这个选不选应该是无所谓的.<br>这个创建完之后，你的博客地址就是 https://用户名.github.io</p><h2 id="3-安装Git，node"><a href="#3-安装Git，node" class="headerlink" title="3.安装Git，node"></a>3.安装Git，node</h2><p>我们要用到git命令和node命令的，这边安装教程就没有了，官网上都有的，git不好安装的话直接去360安全管家上安装，反正我是这么安装的git</p><h2 id="4-配置git生成SSHkey"><a href="#4-配置git生成SSHkey" class="headerlink" title="4. 配置git生成SSHkey"></a>4. 配置git生成SSHkey</h2><p>鼠标右击会有一个 Git BashHere的菜单，选择这个，打开的就是我们Git命令行的页面了，首先设置一下全局的name和email<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"你的GitHub用户名"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></p><p>配置SSHkey<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">"你的GitHub注册邮箱"</span></span><br></pre></td></tr></table></figure></p><p>如果你不需要修改存放路劲的话，一路回车，最后生成的sshkey在C:\Users\Administrator.ssh\id_rsa.pub这个里面<br>绑定SSHKey<br><img src="http://static.zybuluo.com/shenweizheng/yq5z8046ndm8lwqey2dre8w4/TIM%E6%88%AA%E5%9B%BE20181021223352.png" alt="TIM截图20181021223352.png-13.3kB"><br><img src="http://static.zybuluo.com/shenweizheng/6zihqrjaxju7inxwces2gjp3/TIM%E6%88%AA%E5%9B%BE20181021223452.png" alt="TIM截图20181021223452.png-55.5kB"><br>New SShkey  之后的title这个随意，key的内容是你C:\Users\Administrator.ssh\id_rsa.pub这个文件里面的内容你需要都复制过来</p><h2 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a>5.安装Hexo</h2><p>在磁盘里新建一个文件夹 例如我在F盘新建一个myBlog的文件夹，进入该文件夹，鼠标右击git bash here<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-cli g</span><br><span class="line">npm <span class="keyword">install</span> hexo -g</span><br></pre></td></tr></table></figure></p><p>hexo-cli和hexo都全局安装一下<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo v</span></span><br></pre></td></tr></table></figure></p><p>通过这个命令可以看一下hexo是不是装好了，如果出现 hexo 不是command这种报错的，表明环境变量没有配置好，需要配置一下环境变量，hexo在之前的版本好像是会自己配置环境变量，但是现在不行了，需要我们自己手动配置。<br>首先找到安装 hexo 的路径，例如我的是D:\nodejs\npm_global_modules\node_modules\hexo\node_modules<br>这边有一个问题就是node全局安装的模块的路径，默认都是在C盘，这样太占空间了，这个如有需要自行百度一下如何修改node全局模块的安装路径，我是改过了，C盘太小承受不住。回到正题，找到hexo的安装路径后，打开计算机的环境变量，在系统变量新建 HEXOPATH 变量值是我们找到的hexo安装目录，例如我的是D:\nodejs\npm_global_modules\node_modules\hexo\node_modules 这个要注意要hexo前面的路径每个人不一样，但是从hexo开始到后面的路径肯定是和我一样的。<br>要定位到hexo的node_modules下。创建完系统变量后，在环境变量里找到Path变量，点击编辑，在末尾添加<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;<span class="meta">%</span>HEXOPATH<span class="meta">%</span>\.bi<span class="symbol">n</span></span><br></pre></td></tr></table></figure></p><p>注意这边的分号，如果本来path的末尾有分号的话就不用加了。配置完环境变量之后，cmd进命令行 hexo v看是不是能成功打印出hexo的版本号，类似于这样<br><img src="http://static.zybuluo.com/shenweizheng/qreltan9nvok2lwmp6opnidy/TIM%E6%88%AA%E5%9B%BE20181021225244.png" alt="TIM截图20181021225244.png-13.5kB"></p><h2 id="6-初始化hexo文件夹"><a href="#6-初始化hexo文件夹" class="headerlink" title="6.初始化hexo文件夹"></a>6.初始化hexo文件夹</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure><p>使用hexo init命令初始化一个叫blog的文件夹，然后<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">./blog</span></span><br></pre></td></tr></table></figure></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p>进入刚刚初始化的文件夹,安装hexo的相关配置<br>安装hexo的其他插件，在博客配置中需要用到<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">admin</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><h2 id="7-本地访问"><a href="#7-本地访问" class="headerlink" title="7.本地访问"></a>7.本地访问</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">生成静态页面</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">开启本地服务器</span><br><span class="line">hexo s</span><br><span class="line">访问地址</span><br><span class="line">http:<span class="comment">//localhost:4000/</span></span><br></pre></td></tr></table></figure><h2 id="8-部署github"><a href="#8-部署github" class="headerlink" title="8.部署github"></a>8.部署github</h2><p>在部署之前我们需要修改一下博客的配置，在blog/_config.yml为文件中找到deploy这个词，这个是配置github的<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">type</span>: git</span><br><span class="line">#这里是第二部创建的仓库的地址</span><br><span class="line"><span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:git用户名/git用户户名.github.io.git</span><br><span class="line">#部署的分支</span><br><span class="line"><span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>修改完配置之后<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#清空静态页面</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta">#生成静态页面</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="meta">#部署 </span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>输入你的博客地址 https://用户名.github.io 就可以访问了<br>hexo的主题更换配置以及hexo博客的配置将在下一篇写。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于springboot post方法参数为两个实体类的解决办法</title>
      <link href="/2018/10/26/%E5%85%B3%E4%BA%8Espringboot%20post%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/10/26/%E5%85%B3%E4%BA%8Espringboot%20post%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E4%B8%BA%E4%B8%A4%E4%B8%AA%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>前端调用后端api某个post方法的时候，如果发现方法的参数为两个实体类的时候，我们像往常一样传参，后台会发生接收不到参数的问题。</p><h2 id="1-分装成dto"><a href="#1-分装成dto" class="headerlink" title="1.分装成dto"></a>1.分装成dto</h2><p>如果两个参数都是实体类的话，可以采用将两个实体类封装成一个实体类的方法。比如说有两个实体类，Techer和Course 这是两个pojo 那么我们可以定义一个实体类叫做 TeacherCourseDto 他的属性只有两个，一个是Teacher teacher一个是Course course 这样前台传参的时候<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">teacher</span>: value1,</span><br><span class="line">    course: value2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就可以了</p><h2 id="2-采用-InitBinder注解"><a href="#2-采用-InitBinder注解" class="headerlink" title="2.采用@InitBinder注解"></a>2.采用@InitBinder注解</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"student"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">initBinderStudent</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">      binder.setFieldDefaultPrefix(<span class="string">"student."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"course"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">initBinderCourse</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">      binder.setFieldDefaultPrefix(<span class="string">"course."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>@InitBinder() 中间的value值，用于指定表单属性或请求参数的名字，符合该名字的将使用此处的DataBinder<br>注意： binder.setFieldDefaultPrefix(“student.”)，这里的”.”千万别忘记了！！！<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span></span>&#123;  </span><br><span class="line">  <span class="keyword">String</span> id;  </span><br><span class="line">  <span class="keyword">String</span> note;  </span><br><span class="line">  <span class="comment">//get..set....  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span></span>&#123;  </span><br><span class="line">  <span class="keyword">String</span> id;  </span><br><span class="line">  <span class="keyword">String</span> note;</span><br><span class="line">  <span class="comment">//set..get...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这边两个实体类，加上我们上面的initBinder注解 还要在ctrl上做点动作<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/classtest"</span>)  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestController &#123;  </span><br><span class="line">    <span class="comment">// 绑定变量名字和属性，参数封装进类  </span></span><br><span class="line">    <span class="meta">@InitBinder</span>(<span class="string">"student"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> initBinderUser(WebDataBinder binder) &#123;  </span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"student."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 绑定变量名字和属性，参数封装进类  </span></span><br><span class="line">    <span class="meta">@InitBinder</span>(<span class="string">"course"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> initBinderAddr(WebDataBinder binder) &#123;  </span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"course."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/methodtest"</span>)  </span><br><span class="line">    <span class="meta">@ResponseBody</span>  </span><br><span class="line">   <span class="keyword">public</span> Map&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; test(<span class="meta">@ModelAttribute</span>(<span class="string">"student"</span>) Student student,<span class="meta">@ModelAttribute</span>(<span class="string">"course"</span>) Course course)&#123;  </span><br><span class="line">        Map&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; map=<span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt;();  </span><br><span class="line">        map.put(<span class="string">"student"</span>, student);  </span><br><span class="line">        map.put(<span class="string">"course"</span>, course);  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>ctrl上的参数使用@ModelAttribute注解指定，这样就可以实现参数两个实体类，不用再去多写一个dto了<br>当然这种方法也有缺陷，具体参考<a href="https://www.jianshu.com/p/59771cbf373d" target="_blank" rel="noopener">SpringMVC表单多对象传递小技巧——@InitBinder</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
